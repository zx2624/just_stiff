// Copyright 2013, Ji Zhang, Carnegie Mellon University
// Further contributions copyright (c) 2016, Southwest Research Institute
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from this
//    software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
// This is an implementation of the algorithm described in the following paper:
//   J. Zhang and S. Singh. LOAM: Lidar Odometry and Mapping in Real-time.
//     Robotics: Science and Systems Conference (RSS). Berkeley, CA, July 2014.

#include <cmath>
#include "transform/rigid_transform.h"
#include <common/common.h>
#include <nav_msgs/Odometry.h>
#include <opencv/cv.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/filters/voxel_grid.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <ros/ros.h>
#include <sensor_msgs/Imu.h>
#include <sensor_msgs/PointCloud2.h>
#include <tf/transform_datatypes.h>
#include <tf/transform_broadcaster.h>
#include <fstream>
#include <list>
#include <glog/logging.h>
#include <string.h>

#include "velodyne/HDL32Structure.h"
#include "util/boostudp/boostudp.h"
#include "common/blocking_queue.h"
#include "common/make_unique.h"
#include "postprocess.h"
#include "sensor_driver_msgs/stiffwater.h"
#include "depth_image_utils/HeightMap.h"
#define PI 3.141592653
double pitchrad[32] = { -30.67, -29.33, -28, -26.67, -25.33, -24, -22.67, -21.33, -20, -18.67, -17.33, -16, -14.67, -13.33, -12, -10.67, -9.3299999, -8, -6.6700001, -5.3299999, -4, -2.6700001, -1.33, 0, 1.33, 2.6700001, 4, 5.3299999, 6.6700001, 8, 9.3299999, 10.67 };
double sintable[32*870];
double costable[32*870];
void callback(const depth_image_utils::HeightMapConstPtr& height_msg){
	cv::namedWindow("range",CV_WINDOW_NORMAL);
	cv::namedWindow("height",CV_WINDOW_NORMAL);
	cv::namedWindow("grid",CV_WINDOW_NORMAL);
	cv::Mat temp = cv::Mat::zeros(32,870,CV_32F);
	cv::Mat temp1 = cv::Mat::zeros(32,870,CV_32F);
	cv::Mat test=cv::Mat::zeros(32,870,CV_32F);
	 for(int i=0;i<32;++i)
	  {
	    for(int j =0;j<870;++j)
	    {
	      temp.at<float>(i,j)=height_msg->data[i*870+j];
	    }
	  }
	 for(int i=0;i<32;++i){
		 for(int j =0;j<870;++j){
			 temp1.at<float>(i,j)=height_msg->data[i*870+j+32*870];
			 test.at<float>(i,j)=height_msg->data[i*870+j+32*870];
	    }
	  }
		cv::Mat gridshow = cv::Mat::zeros(351,201,CV_8UC3);
	 for(int j=0;j<870;j++){
		 for(int i=31;i>0;i--){
			 int index=i*870+j;
			 double dis=(double)temp1.at<float>(i,j)/500.0;
			 double radius=dis*std::cos(pitchrad[31-i]*PI/180);
			 double x=radius*costable[index];
			 double y=radius*sintable[index];
			 int col=boost::math::round((x+30)/0.2);//干！！！！！！！！！！！
			 int row=boost::math::round((y+20)/0.2);
			 int gridindex=0;
			 unsigned char* ptr=gridshow.ptr<unsigned char>(350-row);
			 if(col<201&&row<351&&col>=0&&row>=0){

			
			 if(j==200){
			ptr[3*col]=0;
			 ptr[3*col+1]=0;
			 ptr[3*col+2]=255;

				  }
			 if(ptr[3*col]==0&&ptr[3*col+1]==0&&ptr[3*col+2]==0)
				  {
			 ptr[3*col]=0;
			 ptr[3*col+1]=255;
			 ptr[3*col+2]=0;
				  }
			 }

		 }
	 }

	 cv::imshow("grid",gridshow);
     cv::imshow("range", temp1);
     cv::imshow("height", temp);
     cv::waitKey(10);
}

int main(int argc, char** argv)
{
  ros::init(argc, argv, "stiff_depth");
  ros::NodeHandle nh;

  google::ParseCommandLineFlags(&argc, &argv, true);
  google::InitGoogleLogging(argv[0]);
  google::InstallFailureSignalHandler();
  FLAGS_colorlogtostderr = true; //设置输出到屏幕的日志显示相应颜色
  for(int i=0;i<32;i++){
	  for(int j=0;j<870;j++){

		  double angle=-(j*360.0/870-180);
		  cout<<"thelll"<<angle<<endl;
		  sintable[i*870+j]=std::sin(angle*PI/180);
		  costable[i*870+j]=std::cos(angle*PI/180);
	  }
  }
  ros::Subscriber subHeightMap = nh.subscribe("lidar_height_map",1,callback);

  ros::spin();
}
